/**
 * Grid Layout System
 * 
 * This file provides utility classes for creating CSS Grid layouts.
 */

/* === Grid Container === */
.grid {
    display: grid;
  }
  
  .inline-grid {
    display: inline-grid;
  }
  
  /* === Grid Template Columns === */
  .grid-cols-1 {
    grid-template-columns: repeat(1, minmax(0, 1fr));
  }
  
  .grid-cols-2 {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
  
  .grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
  
  .grid-cols-4 {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
  
  .grid-cols-5 {
    grid-template-columns: repeat(5, minmax(0, 1fr));
  }
  
  .grid-cols-6 {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }
  
  .grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
  }
  
  /* Auto columns */
  .grid-cols-auto {
    grid-template-columns: auto;
  }
  
  .grid-cols-auto-fill {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }
  
  .grid-cols-auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }
  
  /* === Grid Template Rows === */
  .grid-rows-1 {
    grid-template-rows: repeat(1, minmax(0, 1fr));
  }
  
  .grid-rows-2 {
    grid-template-rows: repeat(2, minmax(0, 1fr));
  }
  
  .grid-rows-3 {
    grid-template-rows: repeat(3, minmax(0, 1fr));
  }
  
  .grid-rows-4 {
    grid-template-rows: repeat(4, minmax(0, 1fr));
  }
  
  .grid-rows-5 {
    grid-template-rows: repeat(5, minmax(0, 1fr));
  }
  
  .grid-rows-6 {
    grid-template-rows: repeat(6, minmax(0, 1fr));
  }
  
  /* === Grid Column Spans === */
  .col-span-1 {
    grid-column: span 1 / span 1;
  }
  
  .col-span-2 {
    grid-column: span 2 / span 2;
  }
  
  .col-span-3 {
    grid-column: span 3 / span 3;
  }
  
  .col-span-4 {
    grid-column: span 4 / span 4;
  }
  
  .col-span-5 {
    grid-column: span 5 / span 5;
  }
  
  .col-span-6 {
    grid-column: span 6 / span 6;
  }
  
  .col-span-12 {
    grid-column: span 12 / span 12;
  }
  
  .col-span-full {
    grid-column: 1 / -1;
  }
  
  /* === Grid Row Spans === */
  .row-span-1 {
    grid-row: span 1 / span 1;
  }
  
  .row-span-2 {
    grid-row: span 2 / span 2;
  }
  
  .row-span-3 {
    grid-row: span 3 / span 3;
  }
  
  .row-span-4 {
    grid-row: span 4 / span 4;
  }
  
  .row-span-5 {
    grid-row: span 5 / span 5;
  }
  
  .row-span-6 {
    grid-row: span 6 / span 6;
  }
  
  .row-span-full {
    grid-row: 1 / -1;
  }
  
  /* === Grid Auto Flow === */
  .grid-flow-row {
    grid-auto-flow: row;
  }
  
  .grid-flow-col {
    grid-auto-flow: column;
  }
  
  .grid-flow-row-dense {
    grid-auto-flow: row dense;
  }
  
  .grid-flow-col-dense {
    grid-auto-flow: column dense;
  }
  
  /* === Grid Auto Columns === */
  .auto-cols-auto {
    grid-auto-columns: auto;
  }
  
  .auto-cols-min {
    grid-auto-columns: min-content;
  }
  
  .auto-cols-max {
    grid-auto-columns: max-content;
  }
  
  .auto-cols-fr {
    grid-auto-columns: minmax(0, 1fr);
  }
  
  /* === Grid Auto Rows === */
  .auto-rows-auto {
    grid-auto-rows: auto;
  }
  
  .auto-rows-min {
    grid-auto-rows: min-content;
  }
  
  .auto-rows-max {
    grid-auto-rows: max-content;
  }
  
  .auto-rows-fr {
    grid-auto-rows: minmax(0, 1fr);
  }
  
  /* === Gap === */
  .gap-0 {
    gap: 0;
  }
  
  .gap-xs {
    gap: var(--spacing-xs);
  }
  
  .gap-sm {
    gap: var(--spacing-sm);
  }
  
  .gap-md {
    gap: var(--spacing-md);
  }
  
  .gap-lg {
    gap: var(--spacing-lg);
  }
  
  .gap-xl {
    gap: var(--spacing-xl);
  }
  
  /* Row Gap */
  .gap-y-0 {
    row-gap: 0;
  }
  
  .gap-y-xs {
    row-gap: var(--spacing-xs);
  }
  
  .gap-y-sm {
    row-gap: var(--spacing-sm);
  }
  
  .gap-y-md {
    row-gap: var(--spacing-md);
  }
  
  .gap-y-lg {
    row-gap: var(--spacing-lg);
  }
  
  .gap-y-xl {
    row-gap: var(--spacing-xl);
  }
  
  /* Column Gap */
  .gap-x-0 {
    column-gap: 0;
  }
  
  .gap-x-xs {
    column-gap: var(--spacing-xs);
  }
  
  .gap-x-sm {
    column-gap: var(--spacing-sm);
  }
  
  .gap-x-md {
    column-gap: var(--spacing-md);
  }
  
  .gap-x-lg {
    column-gap: var(--spacing-lg);
  }
  
  .gap-x-xl {
    column-gap: var(--spacing-xl);
  }
  
  /* === Grid Alignment (Justify Content) === */
  .justify-items-start {
    justify-items: start;
  }
  
  .justify-items-end {
    justify-items: end;
  }
  
  .justify-items-center {
    justify-items: center;
  }
  
  .justify-items-stretch {
    justify-items: stretch;
  }
  
  /* === Grid Alignment (Align Content) === */
  .content-start {
    align-content: start;
  }
  
  .content-end {
    align-content: end;
  }
  
  .content-center {
    align-content: center;
  }
  
  .content-between {
    align-content: space-between;
  }
  
  .content-around {
    align-content: space-around;
  }
  
  .content-evenly {
    align-content: space-evenly;
  }
  
  .content-stretch {
    align-content: stretch;
  }
  
  /* === Grid Alignment (Justify Items) === */
  .justify-self-auto {
    justify-self: auto;
  }
  
  .justify-self-start {
    justify-self: start;
  }
  
  .justify-self-end {
    justify-self: end;
  }
  
  .justify-self-center {
    justify-self: center;
  }
  
  .justify-self-stretch {
    justify-self: stretch;
  }
  
  /* === Grid Alignment (Align Items) === */
  .align-items-start {
    align-items: start;
  }
  
  .align-items-end {
    align-items: end;
  }
  
  .align-items-center {
    align-items: center;
  }
  
  .align-items-stretch {
    align-items: stretch;
  }
  
  /* === Grid Alignment (Align Self) === */
  .self-auto {
    align-self: auto;
  }
  
  .self-start {
    align-self: start;
  }
  
  .self-end {
    align-self: end;
  }
  
  .self-center {
    align-self: center;
  }
  
  .self-stretch {
    align-self: stretch;
  }
  
  /* === Common Grid Layouts === */
  /* Basic responsive grid */
  .grid-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--spacing-lg);
  }
  
  /* Classic 12-column grid system */
  .grid-12-col {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: var(--spacing-md);
  }
  
  /* Grid with sidebar */
  .grid-sidebar {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: var(--spacing-lg);
  }
  
  /* Holy grail layout (header, nav, main, aside, footer) */
  .grid-holy-grail {
    display: grid;
    grid-template-areas:
      "header header header"
      "nav main aside"
      "footer footer footer";
    grid-template-columns: 200px 1fr 200px;
    grid-template-rows: auto 1fr auto;
    min-height: 100vh;
  }
  
  .grid-holy-grail .header {
    grid-area: header;
  }
  
  .grid-holy-grail .nav {
    grid-area: nav;
  }
  
  .grid-holy-grail .main {
    grid-area: main;
  }
  
  .grid-holy-grail .aside {
    grid-area: aside;
  }
  
  .grid-holy-grail .footer {
    grid-area: footer;
  }
  
  /* Masonry-like grid */
  .grid-masonry {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-auto-rows: 20px;
    grid-gap: var(--spacing-md);
  }
  
  /* Responsive adjustments */
  @media (max-width: 992px) {
    .lg\:grid-cols-2 {
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    
    .grid-holy-grail {
      grid-template-areas:
        "header header"
        "nav main"
        "aside aside"
        "footer footer";
      grid-template-columns: 200px 1fr;
    }
  }
  
  @media (max-width: 768px) {
    .md\:grid-cols-1 {
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
    
    .grid-holy-grail {
      grid-template-areas:
        "header"
        "nav"
        "main"
        "aside"
        "footer";
      grid-template-columns: 1fr;
    }
    
    .grid-sidebar {
      grid-template-columns: 1fr;
    }
  }
